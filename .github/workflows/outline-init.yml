name: Build Init Docker Image
on:
    push:
        branches:
            - main
        paths:
            - scripts/init/**
            - .github/outline-init.yml
env:
    PATH_TO_PACKAGE: 'scripts/init'
    APP_NAME: 'outlinewiki-init'
    REPOSITORY: 'quay-its.epfl.ch/svc0070'
jobs:
    get-version:
        runs-on: ubuntu-24.04
        outputs:
            version: ${{ steps.get_unique_version.outputs.unique_version }}
            base_version: ${{ steps.get_version.outputs.version }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Get Version from package.json
              id: get_version
              run: |
                  version=$(jq -r .version ${{ env.PATH_TO_PACKAGE }}/package.json)
                  echo "Version from ${{ env.PATH_TO_PACKAGE }}/package.json: $version"
                  echo "version=$version" >> $GITHUB_OUTPUT

            - name: Set up Docker CLI
              uses: docker/setup-buildx-action@v3
              with:
                  install: true
            - name: Login to Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REPOSITORY }}
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: Check for existing image tags and create unique version
              id: get_unique_version
              run: |
                  BASE_VERSION="${{ steps.get_version.outputs.version }}"
                  echo "Base version: $BASE_VERSION"

                  # Check if the base version already exists
                  if docker manifest inspect ${{ env.REPOSITORY }}/${{ env.APP_NAME }}:$BASE_VERSION > /dev/null 2>&1; then
                    echo "Image with tag $BASE_VERSION already exists, will increment suffix"
                    
                    # Find the highest existing suffix
                    MAX_SUFFIX=0
                    SUFFIX=1
                    
                    while docker manifest inspect ${{ env.REPOSITORY }}/${{ env.APP_NAME }}:$BASE_VERSION-$SUFFIX > /dev/null 2>&1; do
                      echo "Image with tag $BASE_VERSION-$SUFFIX exists"
                      SUFFIX=$((SUFFIX + 1))
                    done
                    
                    UNIQUE_VERSION="$BASE_VERSION-$SUFFIX"
                    echo "Using unique version: $UNIQUE_VERSION"
                  else
                    echo "Base version $BASE_VERSION doesn't exist yet, using it"
                    UNIQUE_VERSION="$BASE_VERSION"
                  fi

                  echo "unique_version=$UNIQUE_VERSION" >> $GITHUB_OUTPUT

    build:
        needs: get-version
        runs-on: ubuntu-24.04
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  install: true

            - name: Login to Docker Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REPOSITORY }}
                  username: ${{ secrets.QUAY_USERNAME }}
                  password: ${{ secrets.QUAY_PASSWORD }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REPOSITORY }}/${{ env.APP_NAME }}
                  tags: |
                      type=raw,value=latest
                      type=raw,value=${{ needs.get-version.outputs.version }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: ${{ env.PATH_TO_PACKAGE }}
                  file: ${{ env.PATH_TO_PACKAGE }}/Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Output Version Information
              run: |
                  echo "Built and pushed image with base version: ${{ needs.get-version.outputs.base_version }}"
                  echo "Final version used: ${{ needs.get-version.outputs.version }}"
