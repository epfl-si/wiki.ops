- name: Check if database secret already exists
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ openshift_namespace }}"
    name: "{{ app }}-db-credentials"
  register: existing_db_secret

- name: Generate database credentials if secret doesn't exist
  block:
    - name: Generate random database credentials
      ansible.builtin.set_fact:
        db_user: "{{ app }}-user"
        db_name: "{{ app }}-db"
        db_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=128') }}"
      when: existing_db_secret.resources | length == 0

    - name: Create database secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ app }}-db-credentials"
            namespace: "{{ openshift_namespace }}"
            labels:
              app: "{{ app }}"
              cnpg.io/reload: "true"
          type: kubernetes.io/basic-auth
          data:
            username: "{{ db_user | b64encode }}"
            password: "{{ db_password  | b64encode }}"
            database: "{{ db_name | b64encode }}"
      when: existing_db_secret.resources | length == 0

- name: Check if application secret already exists
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ openshift_namespace }}"
    name: "{{ app }}-secrets"
  register: existing_app_secret

- name: Manage application secrets
  block:
    - name: Retrieve database credentials
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ openshift_namespace }}"
        name: "{{ app }}-db-credentials"
      register: db_credentials

    - name: Prepare database connection URL
      ansible.builtin.set_fact:
        db_user: "{{ db_credentials.resources[0].data.username | b64decode }}"
        db_password: "{{ db_credentials.resources[0].data.password | b64decode }}"
        db_name: "{{ db_credentials.resources[0].data.database | b64decode }}"

    - name: Prepare secret data structure
      ansible.builtin.set_fact:
        new_secret_data:
          SECRET_KEY: "{{ secrets[env].secret_key }}"
          UTILS_SECRET: "{{ secrets[env].utils_secret }}"
          REDIS_URL: "redis://{{ app }}-redis:6379"
          DATABASE_URL: "postgres://{{ db_user }}:{{ db_password }}@{{ db_host }}:5432/{{ db_name }}"
          AZURE_CLIENT_ID: "{{ secrets[env].entra.client_id }}"
          AZURE_CLIENT_SECRET: "{{ secrets[env].entra.client_secret }}"
          AZURE_TENANT_ID: "{{ secrets[env].entra.tenant_id }}"
          SMTP_HOST: "mail.epfl.ch"
          SMTP_PORT: "587"
          SMTP_USERNAME: "{{ secrets[env].smtp.username }}"
          SMTP_PASSWORD: "{{ secrets[env].smtp.password }}"
          SMTP_FROM_EMAIL: "{{ secrets[env].smtp.from_email }}"
          SMTP_SECURE: "false"
          FILE_STORAGE: "s3"
          AWS_REGION: "us-east-2"
          AWS_S3_FORCE_PATH_STYLE: "false"
          AWS_S3_UPLOAD_BUCKET_NAME: "{{ secrets[env].s3.name }}"
          AWS_S3_UPLOAD_BUCKET_URL: "{{ secrets[env].s3.url }}"
          AWS_ACCESS_KEY_ID: "{{ secrets[env].s3.access_key_id }}"
          AWS_SECRET_ACCESS_KEY: "{{ secrets[env].s3.access_key_secret }}"

    - name: Apply application secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ app }}-secrets"
            namespace: "{{ openshift_namespace }}"
          type: Opaque
          stringData: "{{ new_secret_data }}"
