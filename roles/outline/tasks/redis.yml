- name: Create Redis service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      labels:
        app: "{{ app }}"
        component: redis
      metadata:
        name: "{{ app.name }}-redis"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: "{{ app.name }}"
          component: redis
      spec:
        selector:
          app: "{{ app.name }}"
          component: redis
        ports:
          - name: redis-port
            protocol: TCP
            port: "{{ redis.port }}"
            targetPort: "{{ redis.port }}"

- name: Create Redis persistent volume claim
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ app.name }}-redis-data"
        namespace: "{{ openshift_namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ storage.redis_size }}"
        storageClassName: "{{ storage.class }}"

- name: Create Redis deployment
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ app.name }}-redis"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: "{{ app.name }}"
          component: redis
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ app.name }}"
            component: redis
        template:
          metadata:
            labels:
              app: "{{ app.name }}"
              component: redis
          spec:
            containers:
              - name: redis
                image: "{{ redis.image }}"
                ports:
                  - containerPort: "{{ redis.port }}"
                resources:
                  requests:
                    cpu: "{{ current_resources.redis.requests.cpu }}"
                    memory: "{{ current_resources.redis.requests.memory }}"
                  limits:
                    memory: "{{ current_resources.redis.limits.memory }}"
                volumeMounts:
                  - name: redis-data
                    mountPath: /data
            imagePullSecrets:
              - name: "{{ pull_secret_name }}"
            volumes:
              - name: redis-data
                persistentVolumeClaim:
                  claimName: "{{ app.name }}-redis-data"
