- name: Create redis service
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Service
      labels:
        app: "{{ app }}"
        component: redis
      metadata:
        name: "{{ app }}-redis"
        namespace: "{{ openshift_namespace }}"
      spec:
        selector:
          app: "{{ app }}"
          component: redis
        ports:
          - name: "{{ app }}-redis-svc-port"
            protocol: TCP
            port: 6379
            targetPort: 6379

- name: Create redis PVC
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ app }}-redis-data"
        namespace: "{{ openshift_namespace }}"
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        storageClassName: "{{ storage_class }}"

- name: Create Redis deployment
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: "{{ app }}-redis"
        namespace: "{{ openshift_namespace }}"
        labels:
          app: "{{ app }}"
          component: redis
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: "{{ app }}"
            component: redis
        template:
          metadata:
            labels:
              app: "{{ app }}"
              component: redis
          spec:
            containers:
              - name: redis
                image: quay-its.epfl.ch/svc0176/redis:8.0-M04
                ports:
                  - containerPort: 6379
                resources:
                  requests:
                    cpu: "32m"
                    memory: "50Mi"
                  limits:
                    cpu: "64m"
                    memory: "100Mi"
                volumeMounts:
                  - name: redis-data
                    mountPath: /data
            imagePullSecrets:
              - name: "{{ pull_secret_name }}"
            volumes:
              - name: redis-data
                persistentVolumeClaim:
                  claimName: "{{ app }}-redis-data"
