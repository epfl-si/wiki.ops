- name: Create internal Kubernetes service for wiki application
  kubernetes.core.k8s:
      definition:
          apiVersion: v1
          kind: Service
          metadata:
              name: "{{ app }}"
              namespace: "{{ openshift_namespace }}"
          spec:
              selector:
                  app: "{{ app }}"
              ports:
                  - name: "{{ app }}-svc-port"
                    protocol: TCP
                    port: 80
                    targetPort: 3000

- name: Configure Nginx Ingress for external wiki access
  kubernetes.core.k8s:
      definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
              name: "{{ app }}"
              namespace: "{{ openshift_namespace }}"
              labels:
                  app: "{{ app }}"
                  route: public
              annotations:
                  nginx.ingress.kubernetes.io/rewrite-target: /
                  kubernetes.io/ingress.class: nginx
                  nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
              rules:
                  - host: "{{ subdomain }}{% if env == 'test' %}-test{% endif %}.{{ domain }}"
                    http:
                        paths:
                            - path: /
                              pathType: Prefix
                              backend:
                                  service:
                                      name: "{{ app }}"
                                      port:
                                          number: 80

- name: Create OpenShift Route for external wiki access
  kubernetes.core.k8s:
      definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
              name: "{{ app }}"
              namespace: "{{ openshift_namespace }}"
              labels:
                  app: "{{ app }}"
                  route: public
          spec:
              host: "{{ subdomain }}{% if env == 'test' %}-test{% endif %}.{{ domain }}"
              to:
                  kind: Service
                  name: "{{ app }}"
              port:
                  targetPort: "{{ app }}-svc-port"
              tls:
                  termination: edge
                  insecureEdgeTerminationPolicy: Redirect

- name: Create empty secret for admin API key storage
  kubernetes.core.k8s:
      state: present
      definition:
          apiVersion: v1
          kind: Secret
          metadata:
              name: "{{ app }}-admin-api-key"
              namespace: "{{ openshift_namespace }}"
          type: Opaque
          data: {}

- name: Create Role for init container to manage secrets
  kubernetes.core.k8s:
      state: present
      definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
              name: "{{ app }}-init-secret-writer"
              namespace: "{{ openshift_namespace }}"
          rules:
              - apiGroups:
                    - ""
                resources:
                    - "secrets"
                verbs:
                    - "create"
              - apiGroups:
                    - ""
                resources:
                    - "secrets"
                resourceNames:
                    - "{{ app }}-admin-api-key"
                verbs:
                    - "update"
                    - "get"

- name: Bind secret management role to init container ServiceAccount
  kubernetes.core.k8s:
      state: present
      definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
              name: "{{ app }}-init-secret-writer-binding"
              namespace: "{{ openshift_namespace }}"
          subjects:
              - kind: ServiceAccount
                name: "{{ app }}-init-container-sa"
                namespace: "{{ openshift_namespace }}"
          roleRef:
              kind: Role
              name: "{{ app }}-init-secret-writer"
              apiGroup: rbac.authorization.k8s.io

- name: Create ServiceAccount for init container operations
  kubernetes.core.k8s:
      state: present
      definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
              name: "{{ app }}-init-container-sa"
              namespace: "{{ openshift_namespace }}"

- name: Deploy wiki application with initialization container
  kubernetes.core.k8s:
      definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
              name: "{{ app }}"
              namespace: "{{ openshift_namespace }}"
          spec:
              replicas: 1
              strategy:
                  type: RollingUpdate
                  rollingUpdate:
                      maxUnavailable: 1
              selector:
                  matchLabels:
                      app: "{{ app }}"
              template:
                  metadata:
                      labels:
                          app: "{{ app }}"
                  spec:
                      volumes:
                          - name: yarn-cache
                            emptyDir: {}
                      initContainers:
                          - name: init
                            image: "{{ registry }}/{{ organisation }}/{{ app }}-init:1.0.0"
                            env:
                                - name: DB_PASSWORD
                                  valueFrom:
                                      secretKeyRef:
                                          name: "{{ app }}-db-credentials"
                                          key: "password"
                                - name: DB_HOST
                                  value: "{{ db_host }}"
                                - name: OUTLINE_ADMIN_EMAIL
                                  value: "admin@epfl.ch"
                                - name: OUTLINE_ADMIN_NAME
                                  value: "EPFL Admin"
                                - name: SECRET_NAME
                                  value: "{{ app }}-admin-api-key"
                            resources:
                                requests:
                                    cpu: 100m
                                    memory: 256Mi
                                limits:
                                    cpu: 300m
                                    memory: 512Mi
                      containers:
                          - image: "{{ registry }}/{{ organisation }}/{{ image }}:{{ version }}"
                            imagePullPolicy: Always
                            name: "{{ app }}"
                            ports:
                                - containerPort: 3000
                            env:
                                - name: YARN_CACHE_FOLDER
                                  value: /tmp/.yarn-cache
                                - name: URL
                                  value: "https://{{ subdomain }}{% if env == 'test' %}-test{% endif %}.{{ domain }}"
                                - name: COLLABORATION_URL
                                  value: "https://{{ subdomain }}{% if env == 'test' %}-test{% endif %}.{{ domain }}/collaboration"
                                - name: AWS_S3_UPLOAD_BUCKET_NAME
                                  valueFrom:
                                      secretKeyRef:
                                          name: "s3-credentials"
                                          key: "AWS_BUCKET_NAME"
                                - name: AWS_ACCESS_KEY_ID
                                  valueFrom:
                                      secretKeyRef:
                                          name: "s3-credentials"
                                          key: "AWS_ACCESS_KEY_ID"
                                - name: AWS_SECRET_ACCESS_KEY
                                  valueFrom:
                                      secretKeyRef:
                                          name: "s3-credentials"
                                          key: "AWS_SECRET_ACCESS_KEY"
                            envFrom:
                                - secretRef:
                                      name: "{{ app }}-secrets"
                            command: ["/bin/sh", "-c"]
                            args:
                                - yarn start
                            resources:
                                requests:
                                    cpu: 100m
                                    memory: 512Mi
                                limits:
                                    cpu: 500m
                                    memory: 1024Mi
                            readinessProbe:
                                tcpSocket:
                                    port: 3000
                                initialDelaySeconds: 5
                                timeoutSeconds: 3
                            livenessProbe:
                                tcpSocket:
                                    port: 3000
                                initialDelaySeconds: 5
                                timeoutSeconds: 3
                            volumeMounts:
                                - name: yarn-cache
                                  mountPath: /tmp/.yarn-cache
                      serviceAccountName: "{{ app }}-init-container-sa"
                      imagePullSecrets:
                          - name: "{{ pull_secret_name }}"
